# Understand behavior of method when we vary the "decline to give prediction" parameter (delta)

import os

from os.path import join
from nestly.scons import SConsWrap
from nestly import Nest
from SCons.Script import Environment, Command, AddOption
import numpy as np

Import('env')
localenv = env.Clone()

nest = SConsWrap(Nest(), localenv['output'], alias_environment=localenv)

CONFIGS = {
    "curvy_1d": {
        "num_p": 1,
        "act_func": "relu",
        "std_dev_x": 2.75,
        "parametric_form": "gaussian",
        "density_layer_sizes": "1+10+10",
        "density_weight_param": [0.0001],
        "decision_weight_param": [0.0001],
        # Should not exceed cost decline
        # chose 0.008
        "do_no_harm": [0.004,0.008],
        "inflation": [0.5],
    },
}
MAX_ITER = 2000
NUM_INIT = 4
ACCEPT_PROB = 0.7
LEARNING_RATE = 0.001
NUM_ENSEMBLE = 1
DIST = False

nest.add(
    'sim_func',
    [
	'curvy_1d',
    ],
)

nest.add(
    'num_train',
    [125],
    label_func=lambda c: 'num_train%d' % c,
)

nest.add(
    'seed',
    [1],
    label_func=lambda c: 'seed%d' % c,
)

@nest.add_target_with_env(localenv)
def generate(env, outdir, c):
    config_dict = CONFIGS[c['sim_func']]
    targets = [
        join(outdir, 'obs_data.pkl'),
        join(outdir, 'data_log.txt')]
    cmd = [
        'python generate_data.py',
        '--seed',
        c['seed'],
        '--num-p',
        config_dict['num_p'],
        '--num-train',
        c['num_train'],
        '--sim-func',
        c['sim_func'],
        '--std-dev-x',
        config_dict['std_dev_x'],
        '--max-x 9',
        '--out-data-file ${TARGETS[0]}',
        '--log-file ${TARGETS[1]}']
    return env.Command(
        targets,
        [],
        ' '.join(map(str, cmd)))

nest.add(
    'fold_idx',
    [0],
    label_func=lambda c: 'fold_idx%d' % c,
)
@nest.add_target_with_env(localenv)
def split_data(env, outdir, c):
    targets = [
        join(outdir, 'obs_data_split.pkl')]
    cmd = [
        'python create_data_split.py',
        '--seed',
        c['seed'],
        '--k-fold 5',
        '--fold-idx',
        c['fold_idx'],
        '--in-data-file ${SOURCES[0]}',
        '--out-file ${TARGETS[0]}']
    return env.Command(
        targets,
        c['generate'],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def fit_plain(env, outdir, c):
    config_dict = CONFIGS[c["sim_func"]]
    targets = [
        join(outdir, 'fit_plain.pkl'),
        join(outdir, 'fit_plain_log.txt')]
    sources = [
        c['generate'][0],
        c['split_data'][0]]
    cmd = [
        'python fit_density_nn.py',
        '--seed 2',
        '--data-file ${SOURCES[0]}',
        '--data-split-file ${SOURCES[1]}',
        '--density-parametric-form',
        config_dict["parametric_form"],
        '--density-layer-sizes',
        config_dict["density_layer_sizes"],
        '--density-weight-param',
        ",".join(map(str, config_dict["density_weight_param"])),
        '--act-func',
        config_dict['act_func'],
        '--cv 3',
        '--do-distr' if DIST else '',
        '--num-init',
        NUM_INIT,
        '--num-ensemble',
        NUM_ENSEMBLE,
        '--max-iter',
        MAX_ITER,
        '--learning-rate',
        LEARNING_RATE,
        '--fitted-file ${TARGETS[0]}',
        '--log-file ${TARGETS[1]}']
    return env.Command(
        targets,
        sources,
        ' '.join(map(str, cmd)))

nest.add(
    'cost_decline',
    [0.1],
    label_func=lambda c: 'cost_decline%.2f' % c,
)

@nest.add_target_with_env(localenv)
def fit_no_borrow(env, outdir, c):
    config_dict = CONFIGS[c["sim_func"]]
    targets = [
        join(outdir, 'fit_no_borrow_ulm.pkl'),
        join(outdir, 'fit_no_borrow_ulm_log.txt')]
    sources = [
        c['generate'][0],
        c['split_data'][0]]
    cmd = [
        'python fit_simultaneous_decision_density_nn.py',
        '--seed 2',
        '--data-file ${SOURCES[0]}',
        '--data-split-file ${SOURCES[1]}',
        '--density-parametric-form',
        config_dict["parametric_form"],
        '--density-layer-sizes',
        config_dict["density_layer_sizes"],
        '--density-weight-param',
        ",".join(map(str, config_dict["density_weight_param"])),
        '--decision-weight-param',
        ",".join(map(str, config_dict["decision_weight_param"])),
        '--do-no-harm 0',
        '--inflation 0.001',
        '--cost-decline',
        c['cost_decline'],
        '--act-func',
        config_dict['act_func'],
        '--cv 3',
        '--num-init',
        NUM_INIT,
        '--do-distr' if DIST else '',
        '--num-ensemble',
        NUM_ENSEMBLE,
        '--max-iter',
        MAX_ITER,
        '--log-barrier 0.0001',
        '--learning-rate',
        LEARNING_RATE,
        '--fitted-file ${TARGETS[0]}',
        '--log-file ${TARGETS[1]}']
    return env.Command(
        targets,
        sources,
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def fit_borrow_only_ulm(env, outdir, c):
    config_dict = CONFIGS[c["sim_func"]]
    targets = [
        join(outdir, 'fit_borrow_only_ulm.pkl'),
        join(outdir, 'fit_borrow_only_ulm_log.txt')]
    sources = [
        c['generate'][0],
        c['split_data'][0]]
    cmd = [
        'python fit_simultaneous_decision_density_nn.py',
        '--seed 2',
        '--data-file ${SOURCES[0]}',
        '--data-split-file ${SOURCES[1]}',
        '--density-parametric-form',
        config_dict["parametric_form"],
        '--density-layer-sizes',
        config_dict["density_layer_sizes"],
        '--density-weight-param',
        ",".join(map(str, config_dict["density_weight_param"])),
        '--decision-weight-param',
        ",".join(map(str, config_dict["decision_weight_param"])),
        '--do-no-harm 0',
        '--inflation',
        ",".join(map(str, config_dict["inflation"])),
        '--cost-decline',
        c['cost_decline'],
        '--act-func',
        config_dict['act_func'],
        '--cv 3',
        '--num-init',
        NUM_INIT,
        '--do-distr' if DIST else '',
        '--num-ensemble',
        NUM_ENSEMBLE,
        '--max-iter',
        MAX_ITER,
        '--log-barrier 0.0001',
        '--learning-rate',
        LEARNING_RATE,
        '--fitted-file ${TARGETS[0]}',
        '--log-file ${TARGETS[1]}']
    return env.Command(
        targets,
        sources,
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def fit_ulm(env, outdir, c):
    config_dict = CONFIGS[c["sim_func"]]
    targets = [
        join(outdir, 'fit_nn.pkl'),
        join(outdir, 'fit_nn_log.txt')]
    sources = [
        c['generate'][0],
        c['split_data'][0]]
    cmd = [
        'python fit_simultaneous_decision_density_nn.py',
        '--seed 2',
        '--data-file ${SOURCES[0]}',
        '--data-split-file ${SOURCES[1]}',
        '--support-sim-num',
        100,
        '--density-parametric-form',
        config_dict["parametric_form"],
        '--density-layer-sizes',
        config_dict["density_layer_sizes"],
        '--density-weight-param',
        ",".join(map(str, config_dict["density_weight_param"])),
        '--decision-weight-param',
        ",".join(map(str, config_dict["decision_weight_param"])),
        '--do-no-harm',
        ",".join(map(str, config_dict["do_no_harm"])),
        '--inflation',
        ",".join(map(str, config_dict["inflation"])),
        '--cost-decline',
        c['cost_decline'],
        '--act-func',
        config_dict['act_func'],
        '--cv 4',
        '--num-init',
        NUM_INIT,
        '--do-distr' if DIST else '',
        '--num-ensemble',
        NUM_ENSEMBLE,
        '--max-iter',
        MAX_ITER,
        '--log-barrier 0.0001',
        '--learning-rate',
        LEARNING_RATE,
        '--fitted-file ${TARGETS[0]}',
        '--log-file ${TARGETS[1]}']
    return env.Command(
        targets,
        sources,
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def plot_stuff(env, outdir, c):
    sources = [
        c['generate'][0],
        c['split_data'][0],
        #c['fit_borrow_only_ulm'][0],
        c['fit_ulm'][0],
    ]
    targets = [
        join(outdir, 'accept_region_new.png'),
    ]
    cmd = [
        'python plot_simulation_compare.py',
        '--data-file ${SOURCES[0]}',
        '--accept-prob',
        ACCEPT_PROB,
        '--data-split-file ${SOURCES[1]}',
        '--fitted-files ${SOURCES[2]}',
        '--plot-accept-region-file ${TARGETS[0]}',
    ]
    return env.Command(
        targets,
        sources,
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def plot_no_borrow_stuff(env, outdir, c):
    sources = [
        c['generate'][0],
        c['split_data'][0],
        c['fit_no_borrow'][0],
    ]
    targets = [
        join(outdir, 'accept_region_no_borrow_new.png'),
    ]
    cmd = [
        'python plot_simulation_compare.py',
        '--accept-prob',
        ACCEPT_PROB,
        '--data-file ${SOURCES[0]}',
        '--data-split-file ${SOURCES[1]}',
        '--fitted-files ${SOURCES[2]}',
        '--plot-accept-region-file ${TARGETS[0]}',
    ]
    return env.Command(
        targets,
        sources,
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def plot_borrow_stuff(env, outdir, c):
    sources = [
        c['generate'][0],
        c['split_data'][0],
        c['fit_borrow_only_ulm'][0],
    ]
    targets = [
        join(outdir, 'accept_region_borrow_new.png'),
    ]
    cmd = [
        'python plot_simulation_compare.py',
        '--accept-prob',
        ACCEPT_PROB,
        '--data-file ${SOURCES[0]}',
        '--data-split-file ${SOURCES[1]}',
        '--fitted-files ${SOURCES[2]}',
        '--plot-accept-region-file ${TARGETS[0]}',
    ]
    return env.Command(
        targets,
        sources,
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def plot_thres_od(env, outdir, c):
    sources = [
        c['generate'][0],
        c['split_data'][0],
        c['fit_plain'][0],
    ]
    targets = [
        join(outdir, 'accept_region_thres_od_new.png'),
    ]
    cmd = [
        'python plot_simulation_compare.py',
        '--accept-prob',
        ACCEPT_PROB,
        '--eps 0.01',
        '--add-outlier',
        '--add-thres',
        '--cost-decline',
        c['cost_decline'],
        '--data-file ${SOURCES[0]}',
        '--data-split-file ${SOURCES[1]}',
        '--fitted-files ${SOURCES[2]}',
        '--plot-accept-region-file ${TARGETS[0]}',
    ]
    return env.Command(
        targets,
        sources,
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def plot_outlier(env, outdir, c):
    sources = [
        c['generate'][0],
        c['split_data'][0],
        c['fit_plain'][0],
    ]
    targets = [
        join(outdir, 'accept_region_od_new.png'),
    ]
    cmd = [
        'python plot_simulation_compare.py',
        '--accept-prob',
        ACCEPT_PROB,
        '--eps 0.01',
        '--add-outlier',
        '--cost-decline',
        c['cost_decline'],
        '--data-file ${SOURCES[0]}',
        '--data-split-file ${SOURCES[1]}',
        '--fitted-files ${SOURCES[2]}',
        '--plot-accept-region-file ${TARGETS[0]}',
    ]
    return env.Command(
        targets,
        sources,
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def plot_plain(env, outdir, c):
    sources = [
        c['generate'][0],
        c['split_data'][0],
        c['fit_plain'][0],
    ]
    targets = [
        join(outdir, 'accept_region_plain_new.png'),
    ]
    cmd = [
        'python plot_simulation_compare.py',
        '--accept-prob',
        ACCEPT_PROB,
        '--eps 1',
        '--add-outlier',
        '--cost-decline 1000',
        '--data-file ${SOURCES[0]}',
        '--data-split-file ${SOURCES[1]}',
        '--fitted-files ${SOURCES[2]}',
        '--plot-accept-region-file ${TARGETS[0]}',
    ]
    return env.Command(
        targets,
        sources,
        ' '.join(map(str, cmd)))
